<?php


namespace yii2\monolog;

use Yii;
use Monolog\Logger;
use yii\log\Target;
use Monolog\Formatter\FormatterInterface;

class MonologComponent extends Target
{

    public $channels = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if (!isset($this->channels['main'])) {
            $this->channels['main'] = [
                'handler' => [
                    'type' => 'rotating_file',
                    'path' => '@app/runtime/logs/log_' . date('Y-m-d') . '.log',
                ],
            ];
        }
        foreach ($this->channels as $name => &$channel) {
            $handlers = [];
            $processors = [];
            if (!empty($channel['handler']) && is_array($channel['handler'])) {
                foreach ($channel['handler'] as &$handlerConfig) {
                    if (is_array($handlerConfig)) {
                        $formatter = null;
                        if (isset($handlerConfig['formatter'])){
                            $formatter = $this->createObject($handlerConfig['formatter']);
                            unset($handlerConfig['formatter']);
                        }
                        $handler = $this->createObject($handlerConfig);
                        if ($formatter && $formatter instanceof FormatterInterface) {
                            $handler->setFormatter($formatter);
                        }
                        $handlers[] = $handler;
                    }
                }
            }
            if (!empty($channel['processor']) && is_array($channel['processor'])) {
                $processors = $channel['processor'];
            }
            $channel = new Logger($name, $handlers, $processors);
        }
    }

    /**
     * @inheritDoc
     */
    public function export()
    {
        /** @var Logger $channel */
        $channel = current($this->channels);
        $level = $this->messages[0][1];
        $message = $this->messages[0][0];
        $context = ($this->messages[0][2]);
        switch ($level){
            case \yii\log\Logger::LEVEL_ERROR:
                $sLevel = Logger::ERROR;
                break;
            case \yii\log\Logger::LEVEL_WARNING:
                $sLevel = Logger::WARNING;
                break;
            case \yii\log\Logger::LEVEL_INFO:
                $sLevel = Logger::INFO;
                break;
            case \yii\log\Logger::LEVEL_TRACE:
            case \yii\log\Logger::LEVEL_PROFILE:
            case \yii\log\Logger::LEVEL_PROFILE_BEGIN:
            case \yii\log\Logger::LEVEL_PROFILE_END:
            default:
                $sLevel = Logger::DEBUG;
        }
        switch ($level){
            case \yii\log\Logger::LEVEL_TRACE:
                $message = ['trace' => $message];
                break;
            case \yii\log\Logger::LEVEL_PROFILE:
                $message = ['profile' => $message];
                break;
            case \yii\log\Logger::LEVEL_PROFILE_BEGIN:
                $message = ['profile_begin' => $message];
                break;
            case \yii\log\Logger::LEVEL_PROFILE_END:
                $message = ['profile_end' => $message];
                break;
        }
        $channel->addRecord($sLevel, $context, (array)$message);
    }

    private function createObject(array $array)
    {
        $class = $array['class'] ?? 0;
        if (empty($class)) {
            throw new \InvalidArgumentException("class property is required when create object");
        }
        $reflect = new \ReflectionClass($class);
        $constructor = $reflect->getConstructor();
        $args = [];
        foreach ($constructor->getParameters() as $parameter) {
            $name = $parameter->getName();
            if (empty($array[$name]) && !$parameter->isDefaultValueAvailable()){
                throw new \InvalidArgumentException(sprintf("property:%s is required when create :%s", $name, $class));
            }
            if (!empty($array[$name])){
                $val = $array[$name];
                if (stripos($val, '@') === 0) {
                    $args[$name] = Yii::getAlias($val);
                } else {
                    $args[$name] = $array[$name];
                }
            }
        }
        return $reflect->newInstanceArgs($args);
    }
}